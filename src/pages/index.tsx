import { TRPCClientError } from "@trpc/client";
import { DefaultErrorShape, TRPCError } from "@trpc/server";
import classNames from "classnames";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { Alert } from "../components/Alert";
import { Button } from "../components/Button";
import { Input } from "../components/Input";
import { Label } from "../components/Label";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const subscribe = api.subscription.subscribe.useMutation();
  const [form, setForm] = useState({ email: "" });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();

  function handleSubscribe(e: React.FormEvent) {
    e.preventDefault();
    setIsLoading(true);
    subscribe
      .mutateAsync({
        email: form.email,
      })
      .then(() => {
        return router.push("/success");
      })
      .catch((err: Error) => {
        const message = err.message;
        const errors = JSON.parse(message) as {
          message: string;
        }[];
        setError(
          errors.length === 0
            ? "something went wrong =("
            : errors[0]?.message ?? "something went wrong"
        );
      })
      .finally(() => {
        setIsLoading(false);
      });
  }

  return (
    <>
      <Head>
        <title>Subscribe | WebDevCody</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container m-auto flex min-h-screen flex-col items-center justify-center gap-8 p-4">
        <Image
          className="rounded-full"
          alt="web dev cody brand image"
          src="/wdc.jpeg"
          width="200"
          height="200"
        />

        <h1 className="text-center text-4xl font-bold">
          Subscribe to the
          <br /> WebDevCody Newsletter
        </h1>

        <p className="text-wdc-secondary max-w-screen-sm text-center text-xl">
          Subscribe to my newsletter and receive weekly updates on any community
          projects we are starting, recently published videos, and updates on
          new tutorials and courses.
        </p>

        {error && <Alert>{error}</Alert>}

        <form onSubmit={handleSubscribe} className="flex flex-col gap-6">
          <fieldset className="flex flex-col gap-2">
            <Label htmlFor="email">Email</Label>
            <Input
              className={classNames("w-80", error && "border border-red-500")}
              placeholder="your-email@example.com"
              onChange={(e) => setForm({ email: e.currentTarget.value })}
              id="email"
              name="email"
              required
              type="email"
            />
          </fieldset>
          <Button isLoading={isLoading}>
            {isLoading ? "Subscribing..." : "Subscribe"}
          </Button>
        </form>
      </main>
    </>
  );
};

export default Home;
